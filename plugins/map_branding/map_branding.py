# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MapBranding
                                 A QGIS plugin
 Export the current QGIS map view with a logo, scale bar, north arrow, and metadata footer (project name, date, CRS).
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-09-30
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Mikhail Sokolov
        email                : sokolov.usmk@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtWidgets import QMenu, QToolButton
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis._core import QgsRectangle

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .map_branding_dialog import MapBrandingDialog
import os.path

from qgis.gui import QgsMapCanvas
from .extent_picker_tool import ExtentPickerTool


class MapBranding:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'MapBranding_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Map Branding')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('MapBranding', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/map_branding/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Brand current QGIS view'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Map Branding'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = MapBrandingDialog()

        # Initialize dialog and set up the UI
        self.dlg.show()
        self._setup_choose_extent_menu()
        self.dlg.lineExtent.setPlaceholderText("xmin, ymin, xmax, ymax (project CRS)")

        # Connect buttons
        self.dlg.btnClose.clicked.connect(self._close)

        self.dlg.btnBrowseLogo.clicked.connect(self._browse_logo)
        self.dlg.btnClear.clicked.connect(lambda: self.dlg.lineLogoPath.clear())
        self.dlg.horizontalSlider.setToolTip("Logo opacity (0-100%)")

        # # Run the dialog event loop
        # result = self.dlg.exec_()
        # # See if OK was pressed
        # if result:
        #     # Do something useful here - delete the line containing pass and
        #     # substitute with your code.
        #     pass
    def _setup_choose_extent_menu(self):
        menu = QMenu(self.dlg)
        act_canvas = QAction("From Canvas", self.dlg)
        act_draw = QAction("Draw manually", self.dlg)
        act_canvas.triggered.connect(self._choose_extent_from_canvas)
        act_draw.triggered.connect(self._choose_extent_draw)
        menu.addAction(act_canvas)
        menu.addAction(act_draw)
        # Make the toolbutton behave like QGIS tools do
        self.dlg.btnChooseExtent.setMenu(menu)
        self.dlg.btnChooseExtent.setPopupMode(QToolButton.MenuButtonPopup)
        self.dlg.btnChooseExtent.setDefaultAction(act_canvas)  # click button = From Canvas

    def _choose_extent_from_canvas(self):
        rect = self.iface.mapCanvas().extent()
        self._custom_extent = rect
        self.dlg.lineExtent.setText(f"{rect.toString(6)}")

    def _choose_extent_draw(self):
        # Hide dialog while we interact with the canvas
        self.dlg.hide()
        tool = ExtentPickerTool(self.iface.mapCanvas())
        # When user finishes, weâ€™ll get a QRect in map (project CRS) coords
        def _picked(rect: QgsRectangle | None):
            # restore dialog first
            self.dlg.show()
            if rect is None:
                return
            self._custom_extent = rect
        tool.extentPicked.connect(_picked)
        self.iface.mapCanvas().setMapTool(tool)

    def _browse_logo(self):
        logo_path, _ = QtWidgets.QFileDialog.getOpenFileName(self.dlg, "Select Logo Image", "", "Image Files (*.png *.jpg *.bmp);;All Files (*)")
        if logo_path:
            self.dlg.lineLogoPath.setText(logo_path)

    def _close(self):
        self.dlg.close()