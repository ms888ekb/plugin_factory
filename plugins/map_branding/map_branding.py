# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MapBranding
                                 A QGIS plugin
 Export the current QGIS map view with a logo, scale bar, north arrow, and metadata footer (project name, date, CRS).
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-09-30
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Mikhail Sokolov
        email                : sokolov.usmk@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSignalBlocker
from PyQt5.QtGui import QColor, QPixmap, QImage, QPainter
from qgis.PyQt.QtCore import QSize, Qt, QTimer
from PyQt5.QtWidgets import QMenu, QToolButton, QMessageBox, QVBoxLayout, QLabel
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.PyQt.QtWidgets import QFileDialog, QMessageBox
from qgis.core import QgsMapSettings, QgsMapRendererParallelJob, QgsRectangle, QgsProject

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .map_branding_dialog import MapBrandingDialog
import os.path

from qgis.gui import QgsMapCanvas
from .extent_picker_tool import ExtentPickerTool


class MapBranding:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'MapBranding_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Map Branding')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('MapBranding', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/map_branding/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Brand current QGIS view'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Map Branding'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = MapBrandingDialog()
        # Initialize dialog and set up the UI
        self.dlg.show()
        self._setup_choose_extent_menu()
        self._custom_extent = None  # QgsRectangle in project CRS, or None
        self.dlg.lineExtent.setPlaceholderText("xmin, ymin, xmax, ymax (project CRS)")
        self._initialize_size_scaler()

        # Connect buttons
        self.dlg.btnClose.clicked.connect(self._close)
        self.dlg.btnExport.clicked.connect(self._export)

        self.dlg.btnBrowseLogo.clicked.connect(self._browse_logo)
        self.dlg.btnClear.clicked.connect(lambda: self.dlg.lineLogoPath.clear())
        self.dlg.horizontalSlider.setToolTip("Logo opacity (0-100%)")
        self.dlg.sizeScaler.valueChanged.connect(self._change_width_height)
        self.dlg.spinWidth.valueChanged.connect(self._change_width)
        self.dlg.spinHeigth.valueChanged.connect(self._change_height)

        # Link self._custom_extent to QWidget:
        self._visualize_area_from_custom_extent()
        QTimer.singleShot(0, self._render_preview_current_extent)

    def _export(self):
        # --- 1) Validate inputs ---
        if self._custom_extent is None:
            QMessageBox.warning(self.dlg, "No extent", "Please choose an extent first.")
            return
        if self._custom_extent.width() <= 0 or self._custom_extent.height() <= 0:
            QMessageBox.warning(self.dlg, "Invalid extent", "The chosen extent is invalid.")
            return

        width_px = int(self.dlg.spinWidth.value())
        height_px = int(self.dlg.spinHeigth.value())
        if width_px <= 0 or height_px <= 0:
            QMessageBox.warning(self.dlg, "Invalid size", "Width and height must be positive integers.")
            return

        # --- 2) Ask save path & format ---
        default_name = f"{QgsProject.instance().baseName() or 'map'}_{width_px}x{height_px}"
        filters = "PNG (*.png);;JPEG (*.jpg *.jpeg);;TIFF (*.tif *.tiff);;WEBP (*.webp)"
        out_fp, selected_filter = QFileDialog.getSaveFileName(self.dlg, "Export map image", default_name, filters)
        if not out_fp:
            return

        # Decide format from extension or selected filter
        ext = out_fp.lower().split('.')[-1] if '.' in out_fp else ''
        ext_to_fmt = {"png": "PNG", "jpg": "JPEG", "jpeg": "JPEG", "tif": "TIFF", "tiff": "TIFF", "webp": "WEBP"}
        fmt = ext_to_fmt.get(ext, None)
        if fmt is None:
            # no extension → infer from selected filter and append extension
            if "PNG" in selected_filter:
                fmt, out_fp = "PNG", out_fp + ".png"
            elif "JPEG" in selected_filter:
                fmt, out_fp = "JPEG", out_fp + ".jpg"
            elif "TIFF" in selected_filter:
                fmt, out_fp = "TIFF", out_fp + ".tif"
            elif "WEBP" in selected_filter:
                fmt, out_fp = "WEBP", out_fp + ".webp"
            else:
                fmt, out_fp = "PNG", out_fp + ".png"

        transparent = bool(self.dlg.chkTransparent.isChecked())

        # --- 3) Render map (only the picked extent) to QImage ---
        canvas = self.iface.mapCanvas()

        ms = QgsMapSettings()
        ms.setLayers(canvas.layers())  # same layer stack
        ms.setDestinationCrs(canvas.mapSettings().destinationCrs())  # same dest CRS
        ms.setOutputSize(QSize(width_px, height_px))
        ms.setOutputDpi(96)  # pixel-accurate; DPI not critical when size is in px
        ms.setBackgroundColor(QColor(255, 255, 255, 255 if transparent else 255))
        ms.setExtent(QgsRectangle(self._custom_extent))  # ← the chosen area
        ms.setRotation(canvas.rotation())  # match canvas rotation

        job = QgsMapRendererParallelJob(ms)
        job.start()
        job.waitForFinished()
        img = job.renderedImage()  # QImage with alpha if transparent=True

        # --- 4) JPEG doesn't support alpha → flatten if needed ---
        if fmt == "JPEG" and transparent:
            flat = QImage(width_px, height_px, QImage.Format_RGB32)
            flat.fill(QColor(255, 255, 255))  # white background
            p = QPainter(flat)
            p.drawImage(0, 0, img)
            p.end()
            img_to_save = flat
        else:
            img_to_save = img

        # --- 5) Save ---
        if not img_to_save.save(out_fp, fmt):
            QMessageBox.critical(self.dlg, "Export failed", f"Could not save image to:\n{out_fp}")
            return

        QMessageBox.information(self.dlg, "Export complete", f"Saved:\n{out_fp}")


    def _apply_dimensions(self, w: int, h: int, scale: int):
        """Set spinWidth, spinHeigth, sizeScaler without emitting valueChanged."""
        # Clamp to base limits (your 100% size)
        w = int(max(0, min(w, self._width_px)))
        h = int(max(0, min(h, self._height_px)))
        scale = int(max(0, min(scale, 100)))

        # Block signals while setting to avoid feedback loops
        bw = QSignalBlocker(self.dlg.spinWidth)
        bh = QSignalBlocker(self.dlg.spinHeigth)
        bs = QSignalBlocker(self.dlg.sizeScaler)

        self.dlg.spinWidth.setValue(w)
        self.dlg.spinHeigth.setValue(h)
        self.dlg.sizeScaler.setValue(scale)

    def _change_height(self):
        if self._custom_extent is None:
            return
        h = self.dlg.spinHeigth.value()
        h = min(h, self._height_px)
        w = int(round(h * (self._width_px / float(self._height_px))))
        scale = w * 100.0 / self._width_px
        self._apply_dimensions(w, h, scale)

    def _change_width(self):
        if self._custom_extent is None:
            return
        w = self.dlg.spinWidth.value()
        w = min(w, self._width_px)
        h = int(round(w * (self._height_px / float(self._width_px))))
        scale = w * 100.0 / self._width_px
        self._apply_dimensions(w, h, scale)

    def _change_width_height(self):
        if self._custom_extent is None:
            return
        current_value = self.dlg.sizeScaler.value()
        w = int(round(self._width_px * (current_value / 100.0)))
        h = int(round(self._height_px * (current_value / 100.0)))
        self._apply_dimensions(w, h, current_value)

    def _visualize_area_from_custom_extent(self):
        preview_container = self.dlg.widget
        if preview_container.layout() is None:
            preview_container.setLayout(QVBoxLayout(preview_container))

        if not hasattr(self, "_previewLabel"):
            self._previewLabel = QLabel(preview_container)
            self._previewLabel.setObjectName("lblPreview")
            self._previewLabel.setScaledContents(False)
            self._previewLabel.setMinimumSize(280, 180)
            self._previewLabel.setAlignment(Qt.AlignCenter)
            self._previewLabel.setText("Preview")
            self._previewLabel.setStyleSheet(
                "QLabel { border: 1px solid #999; background: #fff; }")
            preview_container.layout().addWidget(self._previewLabel)

    def _render_preview_current_extent(self):
        """Render self._custom_extent centered into the preview label with blank padding."""
        rect = self._custom_extent
        if rect is None or rect.width() <= 0 or rect.height() <= 0:
            return

        # 1) Preview widget size
        size = self._previewLabel.size()
        W, H = max(1, size.width()), max(1, size.height())

        # 2) Aspect ratios
        map_ratio = rect.width() / rect.height() if rect.height() != 0 else 1.0
        widget_ratio = W / H if H != 0 else 1.0

        # 3) Compute the map image size that fits INSIDE the widget without cropping
        if map_ratio >= widget_ratio:
            # map is wider → span full width, reduce height
            map_w = W
            map_h = int(round(W / map_ratio))
        else:
            # map is taller → span full height, reduce width
            map_h = H
            map_w = int(round(H * map_ratio))

        # 4) Render map into that smaller image (no extent manipulation)
        bg = QColor(255, 255, 255, 255)

        ms = QgsMapSettings()
        ms.setLayers(self.iface.mapCanvas().layers())
        ms.setDestinationCrs(self.iface.mapCanvas().mapSettings().destinationCrs())
        ms.setOutputSize(QSize(map_w, map_h))
        ms.setOutputDpi(96)  # low DPI is fine for preview
        ms.setBackgroundColor(bg)
        ms.setExtent(QgsRectangle(rect))  # DON'T expand/fit; preserve exact extent
        ms.setRotation(self.iface.mapCanvas().rotation())

        job = QgsMapRendererParallelJob(ms)

        def _on_finished():
            map_img = job.renderedImage()

            # 5) Composite into a full-size (W×H) image, centered (letterbox/pillarbox)
            full = QImage(W, H, QImage.Format_ARGB32_Premultiplied)
            full.fill(bg)
            painter = QPainter(full)
            x = (W - map_img.width()) // 2
            y = (H - map_img.height()) // 2
            painter.drawImage(x, y, map_img)
            painter.end()

            self._previewLabel.setPixmap(QPixmap.fromImage(full))

        job.finished.connect(_on_finished)
        job.start()
        job.waitForFinished()
        self._set_width_height()

    def _initialize_size_scaler(self):
        self.dlg.spinWidth.setEnabled(False)
        self.dlg.spinHeigth.setEnabled(False)
        self.dlg.sizeScaler.setEnabled(False)

    def _set_width_height(self):
        if self._custom_extent is None:
            return
        self.dlg.spinWidth.setEnabled(True)
        self.dlg.spinHeigth.setEnabled(True)
        self.dlg.spinWidth.setValue(self._width_px)
        self.dlg.spinHeigth.setValue(self._height_px)
        self.dlg.sizeScaler.setEnabled(True)
        self.dlg.sizeScaler.setValue(100)

    def _setup_choose_extent_menu(self):
        menu = QMenu(self.dlg)
        act_canvas = QAction("From Canvas", self.dlg)
        act_draw = QAction("Draw manually", self.dlg)
        act_canvas.triggered.connect(self._choose_extent_from_canvas)
        act_draw.triggered.connect(self._choose_extent_draw)
        menu.addAction(act_canvas)
        menu.addAction(act_draw)
        # Make the toolbutton behave like QGIS tools do
        self.dlg.btnChooseExtent.setMenu(menu)
        self.dlg.btnChooseExtent.setPopupMode(QToolButton.MenuButtonPopup)
        self.dlg.btnChooseExtent.setDefaultAction(act_canvas)  # click button = From Canvas

    def _choose_extent_from_canvas(self):
        rect = self.iface.mapCanvas().extent()
        self._custom_extent = rect
        self._width_px = self.iface.mapCanvas().mapSettings().outputSize().width()
        self._height_px = self.iface.mapCanvas().mapSettings().outputSize().height()
        self.dlg.lineExtent.setText(f"{rect.toString(6)}")
        self._render_preview_current_extent()

    def _choose_extent_draw(self):
        # Hide dialog while we interact with the canvas
        self.dlg.hide()
        tool = ExtentPickerTool(self.iface.mapCanvas())
        # When user finishes, we’ll get a QRect in map (project CRS) coords
        def _picked(rect: QgsRectangle | None, width_px: int | None, height_px: int | None):
            # restore dialog first
            self.dlg.show()
            if rect is None:
                return
            self._custom_extent = rect
            self._width_px = width_px
            self._height_px = height_px
            self._render_preview_current_extent()

        tool.extentPicked.connect(_picked)
        self.iface.mapCanvas().setMapTool(tool)

    def _browse_logo(self):
        logo_path, _ = QtWidgets.QFileDialog.getOpenFileName(self.dlg, "Select Logo Image", "", "Image Files (*.png *.jpg *.bmp);;All Files (*)")
        if logo_path:
            self.dlg.lineLogoPath.setText(logo_path)

    def _close(self):
        self.dlg.close()